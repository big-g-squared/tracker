type Query {
    classes(skip: Int, take: Int): [Class!]!
    singleClass(id: Int, name: String): Class!
}

type Mutation {
    addClass(name: String!, lecture: DateRange!, discussion: DateRange, lab: DateRange, officeHours: DateRange): Class!
    editClass(id: Int!, name: String, lecture: DateRange, discussion: DateRange, lab: DateRange, officeHours: DateRange): Class!
    deleteClass(id: Int!): Class!
    addModule(classId: String!, name: String!, units: [Unit], weekOf: DateRange): Module!
    editModule(id: Int!, name: String, units: [Unit], weekOf: DateRange): Module!
    deleteModule(id: Int!): Module!
    addUnit(id: Int!, name: String!, description: String, type: String): Unit!
    editUnit(id: Int!, name: String, description: String, type: String): Unit!
    deleteUnit(id: Int!): Unit!
    uploadSchedule(data: String!): Schedule!
}

type Class {
    id: Int!
    name: String!
    lecture: DateRange!
    discussion: DateRange
    lab: DateRange
    officeHours: DateRange!
    modules: [Module!]!
    schedule: Schedule!
}

type DateRange {
    start: String!
    end: String!
}

type Module {
    id: Int!
    name: String!
    units: [Unit!]!
    weekOf: DateRange
}

type Unit {
    id: Int!
    name: String!
    description: String
    type: String!
}

type Schedule {
    scheduleItems: [ScheduleItem!]!
}

type ScheduleItem {
    id: Int!
    unit: Unit!
    time: DateRange!
}