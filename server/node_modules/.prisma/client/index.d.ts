
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Class
 */

export type Class = {
  id: number
  name: string
  lecture: string
  discussion: string | null
  lab: string | null
  officeHours: string
}

/**
 * Model Module
 */

export type Module = {
  id: number
  name: string
  classId: number
  weekOf: string
}

/**
 * Model Unit
 */

export type Unit = {
  id: number
  name: string
  moduleId: number
  description: string
  type: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Classes
 * const classes = await prisma.class.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Classes
   * const classes = await prisma.class.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<GlobalReject>;

  /**
   * `prisma.module`: Exposes CRUD operations for the **Module** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Modules
    * const modules = await prisma.module.findMany()
    * ```
    */
  get module(): Prisma.ModuleDelegate<GlobalReject>;

  /**
   * `prisma.unit`: Exposes CRUD operations for the **Unit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Units
    * const units = await prisma.unit.findMany()
    * ```
    */
  get unit(): Prisma.UnitDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.19.0
   * Query Engine version: c1455d0b443d66b0d9db9bcb1bb9ee0d5bbc511d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Class: 'Class',
    Module: 'Module',
    Unit: 'Unit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Class
   */


  export type AggregateClass = {
    count: ClassCountAggregateOutputType | null
    avg: ClassAvgAggregateOutputType | null
    sum: ClassSumAggregateOutputType | null
    min: ClassMinAggregateOutputType | null
    max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number
  }

  export type ClassSumAggregateOutputType = {
    id: number
  }

  export type ClassMinAggregateOutputType = {
    id: number
    name: string | null
    lecture: string | null
    discussion: string | null
    lab: string | null
    officeHours: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number
    name: string | null
    lecture: string | null
    discussion: string | null
    lab: string | null
    officeHours: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number | null
    lecture: number | null
    discussion: number | null
    lab: number | null
    officeHours: number | null
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    lecture?: true
    discussion?: true
    lab?: true
    officeHours?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    lecture?: true
    discussion?: true
    lab?: true
    officeHours?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    lecture?: true
    discussion?: true
    lab?: true
    officeHours?: true
    _all?: true
  }

  export type ClassAggregateArgs = {
    /**
     * Filter which Class to aggregate.
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
    **/
    orderBy?: Enumerable<ClassOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
    [P in keyof T & keyof AggregateClass]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }



  export type ClassSelect = {
    id?: boolean
    name?: boolean
    lecture?: boolean
    discussion?: boolean
    lab?: boolean
    officeHours?: boolean
    modules?: boolean | ModuleFindManyArgs
  }

  export type ClassInclude = {
    modules?: boolean | ModuleFindManyArgs
  }

  export type ClassGetPayload<
    S extends boolean | null | undefined | ClassArgs,
    U = keyof S
      > = S extends true
        ? Class
    : S extends undefined
    ? never
    : S extends ClassArgs | ClassFindManyArgs
    ?'include' extends U
    ? Class  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'modules'
        ? Array < ModuleGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Class ?Class [P]
  : 
          P extends 'modules'
        ? Array < ModuleGetPayload<S['select'][P]>>  : never
  } 
    : Class
  : Class


  type ClassCountArgs = Merge<
    Omit<ClassFindManyArgs, 'select' | 'include'> & {
      select?: ClassCountAggregateInputType | true
    }
  >

  export interface ClassDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClassFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Class'> extends True ? CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>> : CheckSelect<T, Prisma__ClassClient<Class | null >, Prisma__ClassClient<ClassGetPayload<T> | null >>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClassFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Class'> extends True ? CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>> : CheckSelect<T, Prisma__ClassClient<Class | null >, Prisma__ClassClient<ClassGetPayload<T> | null >>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClassFindManyArgs>(
      args?: SelectSubset<T, ClassFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Class>>, PrismaPromise<Array<ClassGetPayload<T>>>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
    **/
    create<T extends ClassCreateArgs>(
      args: SelectSubset<T, ClassCreateArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
    **/
    delete<T extends ClassDeleteArgs>(
      args: SelectSubset<T, ClassDeleteArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassUpdateArgs>(
      args: SelectSubset<T, ClassUpdateArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassDeleteManyArgs>(
      args?: SelectSubset<T, ClassDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassUpdateManyArgs>(
      args: SelectSubset<T, ClassUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
    **/
    upsert<T extends ClassUpsertArgs>(
      args: SelectSubset<T, ClassUpsertArgs>
    ): CheckSelect<T, Prisma__ClassClient<Class>, Prisma__ClassClient<ClassGetPayload<T>>>

    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): PrismaPromise<GetClassAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClassClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    modules<T extends ModuleFindManyArgs = {}>(args?: Subset<T, ModuleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Module>>, PrismaPromise<Array<ModuleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * Throw an Error if a Class can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Class to fetch.
    **/
    where: ClassWhereUniqueInput
  }


  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * Throw an Error if a Class can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Class to fetch.
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
    **/
    orderBy?: Enumerable<ClassOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
    **/
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class findMany
   */
  export type ClassFindManyArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * Filter, which Classes to fetch.
    **/
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
    **/
    orderBy?: Enumerable<ClassOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
    **/
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
    **/
    skip?: number
    distinct?: Enumerable<ClassScalarFieldEnum>
  }


  /**
   * Class create
   */
  export type ClassCreateArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * The data needed to create a Class.
    **/
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }


  /**
   * Class update
   */
  export type ClassUpdateArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * The data needed to update a Class.
    **/
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
    **/
    where: ClassWhereUniqueInput
  }


  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs = {
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    where?: ClassWhereInput
  }


  /**
   * Class upsert
   */
  export type ClassUpsertArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * The filter to search for the Class to update in case it exists.
    **/
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
    **/
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }


  /**
   * Class delete
   */
  export type ClassDeleteArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
    /**
     * Filter which Class to delete.
    **/
    where: ClassWhereUniqueInput
  }


  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs = {
    where?: ClassWhereInput
  }


  /**
   * Class without action
   */
  export type ClassArgs = {
    /**
     * Select specific fields to fetch from the Class
    **/
    select?: ClassSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ClassInclude | null
  }



  /**
   * Model Module
   */


  export type AggregateModule = {
    count: ModuleCountAggregateOutputType | null
    avg: ModuleAvgAggregateOutputType | null
    sum: ModuleSumAggregateOutputType | null
    min: ModuleMinAggregateOutputType | null
    max: ModuleMaxAggregateOutputType | null
  }

  export type ModuleAvgAggregateOutputType = {
    id: number
    classId: number
  }

  export type ModuleSumAggregateOutputType = {
    id: number
    classId: number
  }

  export type ModuleMinAggregateOutputType = {
    id: number
    name: string | null
    classId: number
    weekOf: string | null
  }

  export type ModuleMaxAggregateOutputType = {
    id: number
    name: string | null
    classId: number
    weekOf: string | null
  }

  export type ModuleCountAggregateOutputType = {
    id: number
    name: number | null
    classId: number
    weekOf: number | null
    _all: number
  }


  export type ModuleAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type ModuleSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type ModuleMinAggregateInputType = {
    id?: true
    name?: true
    classId?: true
    weekOf?: true
  }

  export type ModuleMaxAggregateInputType = {
    id?: true
    name?: true
    classId?: true
    weekOf?: true
  }

  export type ModuleCountAggregateInputType = {
    id?: true
    name?: true
    classId?: true
    weekOf?: true
    _all?: true
  }

  export type ModuleAggregateArgs = {
    /**
     * Filter which Module to aggregate.
    **/
    where?: ModuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modules to fetch.
    **/
    orderBy?: Enumerable<ModuleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ModuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modules from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modules.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Modules
    **/
    count?: true | ModuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ModuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ModuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ModuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ModuleMaxAggregateInputType
  }

  export type GetModuleAggregateType<T extends ModuleAggregateArgs> = {
    [P in keyof T & keyof AggregateModule]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateModule[P]>
      : GetScalarType<T[P], AggregateModule[P]>
  }



  export type ModuleSelect = {
    id?: boolean
    name?: boolean
    class?: boolean | ClassArgs
    classId?: boolean
    weekOf?: boolean
    units?: boolean | UnitFindManyArgs
  }

  export type ModuleInclude = {
    class?: boolean | ClassArgs
    units?: boolean | UnitFindManyArgs
  }

  export type ModuleGetPayload<
    S extends boolean | null | undefined | ModuleArgs,
    U = keyof S
      > = S extends true
        ? Module
    : S extends undefined
    ? never
    : S extends ModuleArgs | ModuleFindManyArgs
    ?'include' extends U
    ? Module  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'class'
        ? ClassGetPayload<S['include'][P]> :
        P extends 'units'
        ? Array < UnitGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Module ?Module [P]
  : 
          P extends 'class'
        ? ClassGetPayload<S['select'][P]> :
        P extends 'units'
        ? Array < UnitGetPayload<S['select'][P]>>  : never
  } 
    : Module
  : Module


  type ModuleCountArgs = Merge<
    Omit<ModuleFindManyArgs, 'select' | 'include'> & {
      select?: ModuleCountAggregateInputType | true
    }
  >

  export interface ModuleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Module that matches the filter.
     * @param {ModuleFindUniqueArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ModuleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ModuleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Module'> extends True ? CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>> : CheckSelect<T, Prisma__ModuleClient<Module | null >, Prisma__ModuleClient<ModuleGetPayload<T> | null >>

    /**
     * Find the first Module that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleFindFirstArgs} args - Arguments to find a Module
     * @example
     * // Get one Module
     * const module = await prisma.module.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ModuleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ModuleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Module'> extends True ? CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>> : CheckSelect<T, Prisma__ModuleClient<Module | null >, Prisma__ModuleClient<ModuleGetPayload<T> | null >>

    /**
     * Find zero or more Modules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Modules
     * const modules = await prisma.module.findMany()
     * 
     * // Get first 10 Modules
     * const modules = await prisma.module.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const moduleWithIdOnly = await prisma.module.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ModuleFindManyArgs>(
      args?: SelectSubset<T, ModuleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Module>>, PrismaPromise<Array<ModuleGetPayload<T>>>>

    /**
     * Create a Module.
     * @param {ModuleCreateArgs} args - Arguments to create a Module.
     * @example
     * // Create one Module
     * const Module = await prisma.module.create({
     *   data: {
     *     // ... data to create a Module
     *   }
     * })
     * 
    **/
    create<T extends ModuleCreateArgs>(
      args: SelectSubset<T, ModuleCreateArgs>
    ): CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>>

    /**
     * Delete a Module.
     * @param {ModuleDeleteArgs} args - Arguments to delete one Module.
     * @example
     * // Delete one Module
     * const Module = await prisma.module.delete({
     *   where: {
     *     // ... filter to delete one Module
     *   }
     * })
     * 
    **/
    delete<T extends ModuleDeleteArgs>(
      args: SelectSubset<T, ModuleDeleteArgs>
    ): CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>>

    /**
     * Update one Module.
     * @param {ModuleUpdateArgs} args - Arguments to update one Module.
     * @example
     * // Update one Module
     * const module = await prisma.module.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ModuleUpdateArgs>(
      args: SelectSubset<T, ModuleUpdateArgs>
    ): CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>>

    /**
     * Delete zero or more Modules.
     * @param {ModuleDeleteManyArgs} args - Arguments to filter Modules to delete.
     * @example
     * // Delete a few Modules
     * const { count } = await prisma.module.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ModuleDeleteManyArgs>(
      args?: SelectSubset<T, ModuleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Modules
     * const module = await prisma.module.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ModuleUpdateManyArgs>(
      args: SelectSubset<T, ModuleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Module.
     * @param {ModuleUpsertArgs} args - Arguments to update or create a Module.
     * @example
     * // Update or create a Module
     * const module = await prisma.module.upsert({
     *   create: {
     *     // ... data to create a Module
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Module we want to update
     *   }
     * })
    **/
    upsert<T extends ModuleUpsertArgs>(
      args: SelectSubset<T, ModuleUpsertArgs>
    ): CheckSelect<T, Prisma__ModuleClient<Module>, Prisma__ModuleClient<ModuleGetPayload<T>>>

    /**
     * Count the number of Modules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleCountArgs} args - Arguments to filter Modules to count.
     * @example
     * // Count the number of Modules
     * const count = await prisma.module.count({
     *   where: {
     *     // ... the filter for the Modules we want to count
     *   }
     * })
    **/
    count<T extends ModuleCountArgs>(
      args?: Subset<T, ModuleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ModuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Module.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ModuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ModuleAggregateArgs>(args: Subset<T, ModuleAggregateArgs>): PrismaPromise<GetModuleAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Module.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ModuleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    class<T extends ClassArgs = {}>(args?: Subset<T, ClassArgs>): CheckSelect<T, Prisma__ClassClient<Class | null >, Prisma__ClassClient<ClassGetPayload<T> | null >>;

    units<T extends UnitFindManyArgs = {}>(args?: Subset<T, UnitFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Unit>>, PrismaPromise<Array<UnitGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Module findUnique
   */
  export type ModuleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * Throw an Error if a Module can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Module to fetch.
    **/
    where: ModuleWhereUniqueInput
  }


  /**
   * Module findFirst
   */
  export type ModuleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * Throw an Error if a Module can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Module to fetch.
    **/
    where?: ModuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modules to fetch.
    **/
    orderBy?: Enumerable<ModuleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Modules.
    **/
    cursor?: ModuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modules from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modules.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Modules.
    **/
    distinct?: Enumerable<ModuleScalarFieldEnum>
  }


  /**
   * Module findMany
   */
  export type ModuleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * Filter, which Modules to fetch.
    **/
    where?: ModuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Modules to fetch.
    **/
    orderBy?: Enumerable<ModuleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Modules.
    **/
    cursor?: ModuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Modules from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Modules.
    **/
    skip?: number
    distinct?: Enumerable<ModuleScalarFieldEnum>
  }


  /**
   * Module create
   */
  export type ModuleCreateArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * The data needed to create a Module.
    **/
    data: XOR<ModuleCreateInput, ModuleUncheckedCreateInput>
  }


  /**
   * Module update
   */
  export type ModuleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * The data needed to update a Module.
    **/
    data: XOR<ModuleUpdateInput, ModuleUncheckedUpdateInput>
    /**
     * Choose, which Module to update.
    **/
    where: ModuleWhereUniqueInput
  }


  /**
   * Module updateMany
   */
  export type ModuleUpdateManyArgs = {
    data: XOR<ModuleUpdateManyMutationInput, ModuleUncheckedUpdateManyInput>
    where?: ModuleWhereInput
  }


  /**
   * Module upsert
   */
  export type ModuleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * The filter to search for the Module to update in case it exists.
    **/
    where: ModuleWhereUniqueInput
    /**
     * In case the Module found by the `where` argument doesn't exist, create a new Module with this data.
    **/
    create: XOR<ModuleCreateInput, ModuleUncheckedCreateInput>
    /**
     * In case the Module was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ModuleUpdateInput, ModuleUncheckedUpdateInput>
  }


  /**
   * Module delete
   */
  export type ModuleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
    /**
     * Filter which Module to delete.
    **/
    where: ModuleWhereUniqueInput
  }


  /**
   * Module deleteMany
   */
  export type ModuleDeleteManyArgs = {
    where?: ModuleWhereInput
  }


  /**
   * Module without action
   */
  export type ModuleArgs = {
    /**
     * Select specific fields to fetch from the Module
    **/
    select?: ModuleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ModuleInclude | null
  }



  /**
   * Model Unit
   */


  export type AggregateUnit = {
    count: UnitCountAggregateOutputType | null
    avg: UnitAvgAggregateOutputType | null
    sum: UnitSumAggregateOutputType | null
    min: UnitMinAggregateOutputType | null
    max: UnitMaxAggregateOutputType | null
  }

  export type UnitAvgAggregateOutputType = {
    id: number
    moduleId: number
  }

  export type UnitSumAggregateOutputType = {
    id: number
    moduleId: number
  }

  export type UnitMinAggregateOutputType = {
    id: number
    name: string | null
    moduleId: number
    description: string | null
    type: string | null
  }

  export type UnitMaxAggregateOutputType = {
    id: number
    name: string | null
    moduleId: number
    description: string | null
    type: string | null
  }

  export type UnitCountAggregateOutputType = {
    id: number
    name: number | null
    moduleId: number
    description: number | null
    type: number | null
    _all: number
  }


  export type UnitAvgAggregateInputType = {
    id?: true
    moduleId?: true
  }

  export type UnitSumAggregateInputType = {
    id?: true
    moduleId?: true
  }

  export type UnitMinAggregateInputType = {
    id?: true
    name?: true
    moduleId?: true
    description?: true
    type?: true
  }

  export type UnitMaxAggregateInputType = {
    id?: true
    name?: true
    moduleId?: true
    description?: true
    type?: true
  }

  export type UnitCountAggregateInputType = {
    id?: true
    name?: true
    moduleId?: true
    description?: true
    type?: true
    _all?: true
  }

  export type UnitAggregateArgs = {
    /**
     * Filter which Unit to aggregate.
    **/
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
    **/
    orderBy?: Enumerable<UnitOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Units
    **/
    count?: true | UnitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UnitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UnitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UnitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UnitMaxAggregateInputType
  }

  export type GetUnitAggregateType<T extends UnitAggregateArgs> = {
    [P in keyof T & keyof AggregateUnit]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnit[P]>
      : GetScalarType<T[P], AggregateUnit[P]>
  }



  export type UnitSelect = {
    id?: boolean
    name?: boolean
    module?: boolean | ModuleArgs
    moduleId?: boolean
    description?: boolean
    type?: boolean
  }

  export type UnitInclude = {
    module?: boolean | ModuleArgs
  }

  export type UnitGetPayload<
    S extends boolean | null | undefined | UnitArgs,
    U = keyof S
      > = S extends true
        ? Unit
    : S extends undefined
    ? never
    : S extends UnitArgs | UnitFindManyArgs
    ?'include' extends U
    ? Unit  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'module'
        ? ModuleGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Unit ?Unit [P]
  : 
          P extends 'module'
        ? ModuleGetPayload<S['select'][P]> : never
  } 
    : Unit
  : Unit


  type UnitCountArgs = Merge<
    Omit<UnitFindManyArgs, 'select' | 'include'> & {
      select?: UnitCountAggregateInputType | true
    }
  >

  export interface UnitDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Unit that matches the filter.
     * @param {UnitFindUniqueArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UnitFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UnitFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Unit'> extends True ? CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>> : CheckSelect<T, Prisma__UnitClient<Unit | null >, Prisma__UnitClient<UnitGetPayload<T> | null >>

    /**
     * Find the first Unit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindFirstArgs} args - Arguments to find a Unit
     * @example
     * // Get one Unit
     * const unit = await prisma.unit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UnitFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UnitFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Unit'> extends True ? CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>> : CheckSelect<T, Prisma__UnitClient<Unit | null >, Prisma__UnitClient<UnitGetPayload<T> | null >>

    /**
     * Find zero or more Units that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Units
     * const units = await prisma.unit.findMany()
     * 
     * // Get first 10 Units
     * const units = await prisma.unit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unitWithIdOnly = await prisma.unit.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UnitFindManyArgs>(
      args?: SelectSubset<T, UnitFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Unit>>, PrismaPromise<Array<UnitGetPayload<T>>>>

    /**
     * Create a Unit.
     * @param {UnitCreateArgs} args - Arguments to create a Unit.
     * @example
     * // Create one Unit
     * const Unit = await prisma.unit.create({
     *   data: {
     *     // ... data to create a Unit
     *   }
     * })
     * 
    **/
    create<T extends UnitCreateArgs>(
      args: SelectSubset<T, UnitCreateArgs>
    ): CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>>

    /**
     * Delete a Unit.
     * @param {UnitDeleteArgs} args - Arguments to delete one Unit.
     * @example
     * // Delete one Unit
     * const Unit = await prisma.unit.delete({
     *   where: {
     *     // ... filter to delete one Unit
     *   }
     * })
     * 
    **/
    delete<T extends UnitDeleteArgs>(
      args: SelectSubset<T, UnitDeleteArgs>
    ): CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>>

    /**
     * Update one Unit.
     * @param {UnitUpdateArgs} args - Arguments to update one Unit.
     * @example
     * // Update one Unit
     * const unit = await prisma.unit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UnitUpdateArgs>(
      args: SelectSubset<T, UnitUpdateArgs>
    ): CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>>

    /**
     * Delete zero or more Units.
     * @param {UnitDeleteManyArgs} args - Arguments to filter Units to delete.
     * @example
     * // Delete a few Units
     * const { count } = await prisma.unit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UnitDeleteManyArgs>(
      args?: SelectSubset<T, UnitDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Units
     * const unit = await prisma.unit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UnitUpdateManyArgs>(
      args: SelectSubset<T, UnitUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Unit.
     * @param {UnitUpsertArgs} args - Arguments to update or create a Unit.
     * @example
     * // Update or create a Unit
     * const unit = await prisma.unit.upsert({
     *   create: {
     *     // ... data to create a Unit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unit we want to update
     *   }
     * })
    **/
    upsert<T extends UnitUpsertArgs>(
      args: SelectSubset<T, UnitUpsertArgs>
    ): CheckSelect<T, Prisma__UnitClient<Unit>, Prisma__UnitClient<UnitGetPayload<T>>>

    /**
     * Count the number of Units.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitCountArgs} args - Arguments to filter Units to count.
     * @example
     * // Count the number of Units
     * const count = await prisma.unit.count({
     *   where: {
     *     // ... the filter for the Units we want to count
     *   }
     * })
    **/
    count<T extends UnitCountArgs>(
      args?: Subset<T, UnitCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnitAggregateArgs>(args: Subset<T, UnitAggregateArgs>): PrismaPromise<GetUnitAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Unit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UnitClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    module<T extends ModuleArgs = {}>(args?: Subset<T, ModuleArgs>): CheckSelect<T, Prisma__ModuleClient<Module | null >, Prisma__ModuleClient<ModuleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Unit findUnique
   */
  export type UnitFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * Throw an Error if a Unit can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Unit to fetch.
    **/
    where: UnitWhereUniqueInput
  }


  /**
   * Unit findFirst
   */
  export type UnitFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * Throw an Error if a Unit can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Unit to fetch.
    **/
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
    **/
    orderBy?: Enumerable<UnitOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Units.
    **/
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Units.
    **/
    distinct?: Enumerable<UnitScalarFieldEnum>
  }


  /**
   * Unit findMany
   */
  export type UnitFindManyArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * Filter, which Units to fetch.
    **/
    where?: UnitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Units to fetch.
    **/
    orderBy?: Enumerable<UnitOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Units.
    **/
    cursor?: UnitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Units from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Units.
    **/
    skip?: number
    distinct?: Enumerable<UnitScalarFieldEnum>
  }


  /**
   * Unit create
   */
  export type UnitCreateArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * The data needed to create a Unit.
    **/
    data: XOR<UnitCreateInput, UnitUncheckedCreateInput>
  }


  /**
   * Unit update
   */
  export type UnitUpdateArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * The data needed to update a Unit.
    **/
    data: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
    /**
     * Choose, which Unit to update.
    **/
    where: UnitWhereUniqueInput
  }


  /**
   * Unit updateMany
   */
  export type UnitUpdateManyArgs = {
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyInput>
    where?: UnitWhereInput
  }


  /**
   * Unit upsert
   */
  export type UnitUpsertArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * The filter to search for the Unit to update in case it exists.
    **/
    where: UnitWhereUniqueInput
    /**
     * In case the Unit found by the `where` argument doesn't exist, create a new Unit with this data.
    **/
    create: XOR<UnitCreateInput, UnitUncheckedCreateInput>
    /**
     * In case the Unit was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UnitUpdateInput, UnitUncheckedUpdateInput>
  }


  /**
   * Unit delete
   */
  export type UnitDeleteArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
    /**
     * Filter which Unit to delete.
    **/
    where: UnitWhereUniqueInput
  }


  /**
   * Unit deleteMany
   */
  export type UnitDeleteManyArgs = {
    where?: UnitWhereInput
  }


  /**
   * Unit without action
   */
  export type UnitArgs = {
    /**
     * Select specific fields to fetch from the Unit
    **/
    select?: UnitSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UnitInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    lecture: 'lecture',
    discussion: 'discussion',
    lab: 'lab',
    officeHours: 'officeHours'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const ModuleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    classId: 'classId',
    weekOf: 'weekOf'
  };

  export type ModuleScalarFieldEnum = (typeof ModuleScalarFieldEnum)[keyof typeof ModuleScalarFieldEnum]


  export const UnitScalarFieldEnum: {
    id: 'id',
    name: 'name',
    moduleId: 'moduleId',
    description: 'description',
    type: 'type'
  };

  export type UnitScalarFieldEnum = (typeof UnitScalarFieldEnum)[keyof typeof UnitScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type ClassWhereInput = {
    AND?: Enumerable<ClassWhereInput>
    OR?: Enumerable<ClassWhereInput>
    NOT?: Enumerable<ClassWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    lecture?: StringFilter | string
    discussion?: StringNullableFilter | string | null
    lab?: StringNullableFilter | string | null
    officeHours?: StringFilter | string
    modules?: ModuleListRelationFilter
  }

  export type ClassOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    lecture?: SortOrder
    discussion?: SortOrder
    lab?: SortOrder
    officeHours?: SortOrder
  }

  export type ClassWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type ModuleWhereInput = {
    AND?: Enumerable<ModuleWhereInput>
    OR?: Enumerable<ModuleWhereInput>
    NOT?: Enumerable<ModuleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    class?: XOR<ClassRelationFilter, ClassWhereInput>
    classId?: IntFilter | number
    weekOf?: StringFilter | string
    units?: UnitListRelationFilter
  }

  export type ModuleOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    classId?: SortOrder
    weekOf?: SortOrder
  }

  export type ModuleWhereUniqueInput = {
    id?: number
    classId?: number
  }

  export type UnitWhereInput = {
    AND?: Enumerable<UnitWhereInput>
    OR?: Enumerable<UnitWhereInput>
    NOT?: Enumerable<UnitWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    module?: XOR<ModuleRelationFilter, ModuleWhereInput>
    moduleId?: IntFilter | number
    description?: StringFilter | string
    type?: StringFilter | string
  }

  export type UnitOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    moduleId?: SortOrder
    description?: SortOrder
    type?: SortOrder
  }

  export type UnitWhereUniqueInput = {
    id?: number
    moduleId?: number
  }

  export type ClassCreateInput = {
    name: string
    lecture: string
    discussion?: string | null
    lab?: string | null
    officeHours: string
    modules?: ModuleCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    name: string
    lecture: string
    discussion?: string | null
    lab?: string | null
    officeHours: string
    modules?: ModuleUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
    modules?: ModuleUpdateManyWithoutClassInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
    modules?: ModuleUncheckedUpdateManyWithoutClassInput
  }

  export type ClassUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
  }

  export type ModuleCreateInput = {
    name: string
    weekOf: string
    class: ClassCreateNestedOneWithoutModulesInput
    units?: UnitCreateNestedManyWithoutModuleInput
  }

  export type ModuleUncheckedCreateInput = {
    id?: number
    name: string
    classId: number
    weekOf: string
    units?: UnitUncheckedCreateNestedManyWithoutModuleInput
  }

  export type ModuleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutModulesInput
    units?: UnitUpdateManyWithoutModuleInput
  }

  export type ModuleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    weekOf?: StringFieldUpdateOperationsInput | string
    units?: UnitUncheckedUpdateManyWithoutModuleInput
  }

  export type ModuleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
  }

  export type ModuleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    weekOf?: StringFieldUpdateOperationsInput | string
  }

  export type UnitCreateInput = {
    name: string
    description: string
    type: string
    module: ModuleCreateNestedOneWithoutUnitsInput
  }

  export type UnitUncheckedCreateInput = {
    id?: number
    name: string
    moduleId: number
    description: string
    type: string
  }

  export type UnitUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    module?: ModuleUpdateOneRequiredWithoutUnitsInput
  }

  export type UnitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    moduleId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    moduleId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type ModuleListRelationFilter = {
    every?: ModuleWhereInput
    some?: ModuleWhereInput
    none?: ModuleWhereInput
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type UnitListRelationFilter = {
    every?: UnitWhereInput
    some?: UnitWhereInput
    none?: UnitWhereInput
  }

  export type ModuleRelationFilter = {
    is?: ModuleWhereInput
    isNot?: ModuleWhereInput
  }

  export type ModuleCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<ModuleCreateWithoutClassInput>, Enumerable<ModuleUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ModuleCreateOrConnectWithoutClassInput>
    connect?: Enumerable<ModuleWhereUniqueInput>
  }

  export type ModuleUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<Enumerable<ModuleCreateWithoutClassInput>, Enumerable<ModuleUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ModuleCreateOrConnectWithoutClassInput>
    connect?: Enumerable<ModuleWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ModuleUpdateManyWithoutClassInput = {
    create?: XOR<Enumerable<ModuleCreateWithoutClassInput>, Enumerable<ModuleUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ModuleCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<ModuleUpsertWithWhereUniqueWithoutClassInput>
    connect?: Enumerable<ModuleWhereUniqueInput>
    set?: Enumerable<ModuleWhereUniqueInput>
    disconnect?: Enumerable<ModuleWhereUniqueInput>
    delete?: Enumerable<ModuleWhereUniqueInput>
    update?: Enumerable<ModuleUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<ModuleUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<ModuleScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ModuleUncheckedUpdateManyWithoutClassInput = {
    create?: XOR<Enumerable<ModuleCreateWithoutClassInput>, Enumerable<ModuleUncheckedCreateWithoutClassInput>>
    connectOrCreate?: Enumerable<ModuleCreateOrConnectWithoutClassInput>
    upsert?: Enumerable<ModuleUpsertWithWhereUniqueWithoutClassInput>
    connect?: Enumerable<ModuleWhereUniqueInput>
    set?: Enumerable<ModuleWhereUniqueInput>
    disconnect?: Enumerable<ModuleWhereUniqueInput>
    delete?: Enumerable<ModuleWhereUniqueInput>
    update?: Enumerable<ModuleUpdateWithWhereUniqueWithoutClassInput>
    updateMany?: Enumerable<ModuleUpdateManyWithWhereWithoutClassInput>
    deleteMany?: Enumerable<ModuleScalarWhereInput>
  }

  export type ClassCreateNestedOneWithoutModulesInput = {
    create?: XOR<ClassCreateWithoutModulesInput, ClassUncheckedCreateWithoutModulesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutModulesInput
    connect?: ClassWhereUniqueInput
  }

  export type UnitCreateNestedManyWithoutModuleInput = {
    create?: XOR<Enumerable<UnitCreateWithoutModuleInput>, Enumerable<UnitUncheckedCreateWithoutModuleInput>>
    connectOrCreate?: Enumerable<UnitCreateOrConnectWithoutModuleInput>
    connect?: Enumerable<UnitWhereUniqueInput>
  }

  export type UnitUncheckedCreateNestedManyWithoutModuleInput = {
    create?: XOR<Enumerable<UnitCreateWithoutModuleInput>, Enumerable<UnitUncheckedCreateWithoutModuleInput>>
    connectOrCreate?: Enumerable<UnitCreateOrConnectWithoutModuleInput>
    connect?: Enumerable<UnitWhereUniqueInput>
  }

  export type ClassUpdateOneRequiredWithoutModulesInput = {
    create?: XOR<ClassCreateWithoutModulesInput, ClassUncheckedCreateWithoutModulesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutModulesInput
    upsert?: ClassUpsertWithoutModulesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<ClassUpdateWithoutModulesInput, ClassUncheckedUpdateWithoutModulesInput>
  }

  export type UnitUpdateManyWithoutModuleInput = {
    create?: XOR<Enumerable<UnitCreateWithoutModuleInput>, Enumerable<UnitUncheckedCreateWithoutModuleInput>>
    connectOrCreate?: Enumerable<UnitCreateOrConnectWithoutModuleInput>
    upsert?: Enumerable<UnitUpsertWithWhereUniqueWithoutModuleInput>
    connect?: Enumerable<UnitWhereUniqueInput>
    set?: Enumerable<UnitWhereUniqueInput>
    disconnect?: Enumerable<UnitWhereUniqueInput>
    delete?: Enumerable<UnitWhereUniqueInput>
    update?: Enumerable<UnitUpdateWithWhereUniqueWithoutModuleInput>
    updateMany?: Enumerable<UnitUpdateManyWithWhereWithoutModuleInput>
    deleteMany?: Enumerable<UnitScalarWhereInput>
  }

  export type UnitUncheckedUpdateManyWithoutModuleInput = {
    create?: XOR<Enumerable<UnitCreateWithoutModuleInput>, Enumerable<UnitUncheckedCreateWithoutModuleInput>>
    connectOrCreate?: Enumerable<UnitCreateOrConnectWithoutModuleInput>
    upsert?: Enumerable<UnitUpsertWithWhereUniqueWithoutModuleInput>
    connect?: Enumerable<UnitWhereUniqueInput>
    set?: Enumerable<UnitWhereUniqueInput>
    disconnect?: Enumerable<UnitWhereUniqueInput>
    delete?: Enumerable<UnitWhereUniqueInput>
    update?: Enumerable<UnitUpdateWithWhereUniqueWithoutModuleInput>
    updateMany?: Enumerable<UnitUpdateManyWithWhereWithoutModuleInput>
    deleteMany?: Enumerable<UnitScalarWhereInput>
  }

  export type ModuleCreateNestedOneWithoutUnitsInput = {
    create?: XOR<ModuleCreateWithoutUnitsInput, ModuleUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: ModuleCreateOrConnectWithoutUnitsInput
    connect?: ModuleWhereUniqueInput
  }

  export type ModuleUpdateOneRequiredWithoutUnitsInput = {
    create?: XOR<ModuleCreateWithoutUnitsInput, ModuleUncheckedCreateWithoutUnitsInput>
    connectOrCreate?: ModuleCreateOrConnectWithoutUnitsInput
    upsert?: ModuleUpsertWithoutUnitsInput
    connect?: ModuleWhereUniqueInput
    update?: XOR<ModuleUpdateWithoutUnitsInput, ModuleUncheckedUpdateWithoutUnitsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type ModuleCreateWithoutClassInput = {
    name: string
    weekOf: string
    units?: UnitCreateNestedManyWithoutModuleInput
  }

  export type ModuleUncheckedCreateWithoutClassInput = {
    id?: number
    name: string
    weekOf: string
    units?: UnitUncheckedCreateNestedManyWithoutModuleInput
  }

  export type ModuleCreateOrConnectWithoutClassInput = {
    where: ModuleWhereUniqueInput
    create: XOR<ModuleCreateWithoutClassInput, ModuleUncheckedCreateWithoutClassInput>
  }

  export type ModuleUpsertWithWhereUniqueWithoutClassInput = {
    where: ModuleWhereUniqueInput
    update: XOR<ModuleUpdateWithoutClassInput, ModuleUncheckedUpdateWithoutClassInput>
    create: XOR<ModuleCreateWithoutClassInput, ModuleUncheckedCreateWithoutClassInput>
  }

  export type ModuleUpdateWithWhereUniqueWithoutClassInput = {
    where: ModuleWhereUniqueInput
    data: XOR<ModuleUpdateWithoutClassInput, ModuleUncheckedUpdateWithoutClassInput>
  }

  export type ModuleUpdateManyWithWhereWithoutClassInput = {
    where: ModuleScalarWhereInput
    data: XOR<ModuleUpdateManyMutationInput, ModuleUncheckedUpdateManyWithoutModulesInput>
  }

  export type ModuleScalarWhereInput = {
    AND?: Enumerable<ModuleScalarWhereInput>
    OR?: Enumerable<ModuleScalarWhereInput>
    NOT?: Enumerable<ModuleScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    classId?: IntFilter | number
    weekOf?: StringFilter | string
  }

  export type ClassCreateWithoutModulesInput = {
    name: string
    lecture: string
    discussion?: string | null
    lab?: string | null
    officeHours: string
  }

  export type ClassUncheckedCreateWithoutModulesInput = {
    id?: number
    name: string
    lecture: string
    discussion?: string | null
    lab?: string | null
    officeHours: string
  }

  export type ClassCreateOrConnectWithoutModulesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutModulesInput, ClassUncheckedCreateWithoutModulesInput>
  }

  export type UnitCreateWithoutModuleInput = {
    name: string
    description: string
    type: string
  }

  export type UnitUncheckedCreateWithoutModuleInput = {
    id?: number
    name: string
    description: string
    type: string
  }

  export type UnitCreateOrConnectWithoutModuleInput = {
    where: UnitWhereUniqueInput
    create: XOR<UnitCreateWithoutModuleInput, UnitUncheckedCreateWithoutModuleInput>
  }

  export type ClassUpsertWithoutModulesInput = {
    update: XOR<ClassUpdateWithoutModulesInput, ClassUncheckedUpdateWithoutModulesInput>
    create: XOR<ClassCreateWithoutModulesInput, ClassUncheckedCreateWithoutModulesInput>
  }

  export type ClassUpdateWithoutModulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateWithoutModulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    lecture?: StringFieldUpdateOperationsInput | string
    discussion?: NullableStringFieldUpdateOperationsInput | string | null
    lab?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUpsertWithWhereUniqueWithoutModuleInput = {
    where: UnitWhereUniqueInput
    update: XOR<UnitUpdateWithoutModuleInput, UnitUncheckedUpdateWithoutModuleInput>
    create: XOR<UnitCreateWithoutModuleInput, UnitUncheckedCreateWithoutModuleInput>
  }

  export type UnitUpdateWithWhereUniqueWithoutModuleInput = {
    where: UnitWhereUniqueInput
    data: XOR<UnitUpdateWithoutModuleInput, UnitUncheckedUpdateWithoutModuleInput>
  }

  export type UnitUpdateManyWithWhereWithoutModuleInput = {
    where: UnitScalarWhereInput
    data: XOR<UnitUpdateManyMutationInput, UnitUncheckedUpdateManyWithoutUnitsInput>
  }

  export type UnitScalarWhereInput = {
    AND?: Enumerable<UnitScalarWhereInput>
    OR?: Enumerable<UnitScalarWhereInput>
    NOT?: Enumerable<UnitScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    moduleId?: IntFilter | number
    description?: StringFilter | string
    type?: StringFilter | string
  }

  export type ModuleCreateWithoutUnitsInput = {
    name: string
    weekOf: string
    class: ClassCreateNestedOneWithoutModulesInput
  }

  export type ModuleUncheckedCreateWithoutUnitsInput = {
    id?: number
    name: string
    classId: number
    weekOf: string
  }

  export type ModuleCreateOrConnectWithoutUnitsInput = {
    where: ModuleWhereUniqueInput
    create: XOR<ModuleCreateWithoutUnitsInput, ModuleUncheckedCreateWithoutUnitsInput>
  }

  export type ModuleUpsertWithoutUnitsInput = {
    update: XOR<ModuleUpdateWithoutUnitsInput, ModuleUncheckedUpdateWithoutUnitsInput>
    create: XOR<ModuleCreateWithoutUnitsInput, ModuleUncheckedCreateWithoutUnitsInput>
  }

  export type ModuleUpdateWithoutUnitsInput = {
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutModulesInput
  }

  export type ModuleUncheckedUpdateWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    classId?: IntFieldUpdateOperationsInput | number
    weekOf?: StringFieldUpdateOperationsInput | string
  }

  export type ModuleUpdateWithoutClassInput = {
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
    units?: UnitUpdateManyWithoutModuleInput
  }

  export type ModuleUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
    units?: UnitUncheckedUpdateManyWithoutModuleInput
  }

  export type ModuleUncheckedUpdateManyWithoutModulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    weekOf?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUpdateWithoutModuleInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateWithoutModuleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type UnitUncheckedUpdateManyWithoutUnitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}